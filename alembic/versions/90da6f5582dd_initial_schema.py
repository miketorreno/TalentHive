"""Initial schema

Revision ID: 90da6f5582dd
Revises: 
Create Date: 2025-02-27 22:21:58.913771

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '90da6f5582dd'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('category_name', sa.String(), nullable=False),
    sa.Column('category_description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['categories.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('skills',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('skill_name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('skill_name')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('telegram_id', sa.BigInteger(), nullable=False),
    sa.Column('role_id', sa.SmallInteger(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=False),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('gender', sa.String(), nullable=False),
    sa.Column('dob', sa.Date(), nullable=False),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=True),
    sa.Column('country', sa.String(), nullable=False),
    sa.Column('city', sa.String(), nullable=False),
    sa.Column('cv_url', sa.String(), nullable=True),
    sa.Column('education', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('experience', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('expertise', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('portfolios', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('user_preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('subscribed_alerts', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('verified_user', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_education'), 'users', ['education'], unique=False)
    op.create_index(op.f('ix_users_experience'), 'users', ['experience'], unique=False)
    op.create_index(op.f('ix_users_expertise'), 'users', ['expertise'], unique=False)
    op.create_table('companies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('company_type', sa.String(), nullable=True),
    sa.Column('startup_type', sa.String(), nullable=True),
    sa.Column('company_name', sa.String(), nullable=False),
    sa.Column('company_description', sa.Text(), nullable=True),
    sa.Column('trade_license', sa.String(), nullable=True),
    sa.Column('employer_photo', sa.String(), nullable=True),
    sa.Column('company_website', sa.String(), nullable=True),
    sa.Column('company_industry', sa.String(), nullable=True),
    sa.Column('company_status', sa.String(), nullable=False),
    sa.Column('verified_company', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_skills',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('skill_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['skill_id'], ['skills.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'skill_id')
    )
    op.create_table('jobs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('company_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('job_title', sa.String(), nullable=False),
    sa.Column('job_type', sa.String(), nullable=False),
    sa.Column('job_site', sa.String(), nullable=False),
    sa.Column('job_sector', sa.String(), nullable=False),
    sa.Column('education_qualification', sa.String(), nullable=False),
    sa.Column('experience_level', sa.String(), nullable=False),
    sa.Column('gender_preference', sa.String(), nullable=True),
    sa.Column('job_deadline', sa.Date(), nullable=False),
    sa.Column('job_vacancies', sa.SmallInteger(), nullable=True),
    sa.Column('job_description', sa.Text(), nullable=False),
    sa.Column('job_requirements', sa.Text(), nullable=False),
    sa.Column('job_city', sa.String(), nullable=False),
    sa.Column('job_country', sa.String(), nullable=False),
    sa.Column('salary_type', sa.String(), nullable=True),
    sa.Column('salary_currency', sa.String(), nullable=False),
    sa.Column('salary_amount', sa.Integer(), nullable=True),
    sa.Column('salary_range', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('job_status', sa.String(), nullable=True),
    sa.Column('job_promoted', sa.Boolean(), nullable=False),
    sa.Column('job_closed', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('applications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('job_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('cover_letter', sa.Text(), nullable=True),
    sa.Column('resume', sa.String(), nullable=True),
    sa.Column('portfolio', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('application_note', sa.String(), nullable=True),
    sa.Column('application_status', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('job_skills',
    sa.Column('job_id', sa.Integer(), nullable=False),
    sa.Column('skill_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], ),
    sa.ForeignKeyConstraint(['skill_id'], ['skills.id'], ),
    sa.PrimaryKeyConstraint('job_id', 'skill_id')
    )
    op.create_table('saved_jobs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('job_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('saved_jobs')
    op.drop_table('job_skills')
    op.drop_table('applications')
    op.drop_table('jobs')
    op.drop_table('user_skills')
    op.drop_table('companies')
    op.drop_index(op.f('ix_users_expertise'), table_name='users')
    op.drop_index(op.f('ix_users_experience'), table_name='users')
    op.drop_index(op.f('ix_users_education'), table_name='users')
    op.drop_table('users')
    op.drop_table('skills')
    op.drop_table('categories')
    # ### end Alembic commands ###
